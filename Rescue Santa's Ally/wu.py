from math import gcd
from Crypto.Util.number import *

p_ = "2?9?2?2?1?5?6?4?2?2?9?8?3?8?9?0?7?5?2?0?8?2?8?1?1?8?3?6?2?1?0?6?2?4?5?9?1?4?6?2?3?2?8?2?7?7?3?3?5?6?6?9?1?6?8?9?8?7?4?7?8?1?9?4?6?1?9?2?3?4?3?7?5?1?5?9?7?2?1?3?3?4?0?2?2?7?4?8?9?9?8?3?5?0?2?4?6?0?2?7?5?7?9?3?9?5?4?8?1?5?9?5?6?1?3?1?3?1?4?2?6?1?8?6?4?8?3?9?1?9?4?7?0?3?7?8?6?5?9?3?1?1?4?8?3?7?4?0?8?7?7?1?3?9?4?4?6?9?1?6?6?5?8?8?7?7?4?4?1?9?1?9?7?3?0?4?5?0?9?9?3?7?5?3?3?7?9?6?5?3?7?4?1?2?6?3?2?1?9?7?2?8?4?1?0?6?8?6?6?8?2?0?6?3?4?2?5?9?6?0?5?3?9?9?4?2?5?9?8?1?5?7?1?4?8?3?0?3?4?4?2?3?4?0?8?2?7?4?4?4?9?3?6?0?7?7?9?7?8?4?2?4?4?6?3?5?1?7?8?5?0?1?0?1?0?9?7?2?9?0?0?3?5?0?2?3?5?4?4?4?9?2?4?1?6?3?8?4?1?6?4?5?7?6?4?5?6?8?3"
q_ = "?4?7?7?0?4?9?7?2?8?4?5?1?0?6?3?8?8?3?6?5?9?5?7?4?4?4?7?6?4?5?2?8?1?7?9?3?2?8?4?1?0?4?3?1?4?4?4?6?9?3?9?5?8?5?7?0?1?1?2?2?5?4?7?0?0?4?0?6?3?4?9?0?1?6?4?0?3?7?5?7?7?7?6?1?4?7?1?2?1?4?5?6?4?6?1?3?2?9?4?7?5?7?0?1?8?1?1?2?8?1?5?7?1?1?3?4?9?7?8?3?9?5?6?3?6?3?4?2?2?4?8?8?6?8?7?7?2?9?4?1?7?8?0?2?3?8?0?6?4?1?4?6?9?4?8?1?6?0?5?4?1?1?0?9?0?5?6?4?3?0?3?7?8?9?7?6?2?2?9?2?9?4?4?6?9?2?9?6?5?4?5?9?3?1?2?5?7?5?7?1?5?2?7?7?4?6?5?7?9?4?4?1?6?4?0?4?7?8?7?7?0?7?3?6?9?9?5?4?3?9?8?7?4?7?0?1?5?3?9?1?2?4?7?5?6?7?3?9?7?6?4?2?9?9?7?0?6?8?9?8?2?6?9?2?6?2?2?6?8?5?7?4?9?1?0?5?4?5?9?9?8?9?1?3?0?3?7?6?7?7?3?3?0?2?1?8?0?1?9?5?3?7?1?2?4?4?3?6?"
n_ = "66205304920947683542217052534525868363781882365145078974671498852389584044553152921141498601021868813171893942112123694953659595?8856947932423874522257865510905902095432857475232866305978078990019827584920409305992623327876610056981544782738867864286877045526868769353116024504654437858025571009765867199733175531125478570543401853244947804791889092286283021256886053318639429826410892357165283190618024338238344440313543356800657258432005571382469527673957360963541797642737575198060090911597931708576212425747832157107208912165655643521666085187741161188487165536563025054452831520470812676985478026449904432703027144167007765819290049882942098952855756229266813165338267965771218112097368582515041493383232966456058287589615905917?81772089567044954431282919645864984735732743960795125242788296875230594464117679232458058720003646874846952178304392114673689262264493048632927899896234534484187479880372072557395709642534685794942795766694417022354221736315958245111225964928792469863445890717603973578252468699552561095386534358214573591092050422294693287890970700923151679126333230513804974670699558889954831134019614393122779550909410221824125329866795343222520959672110985083685928?1050585411544449928373753361283735669641729051"

mark_index = -1
question_mark_indexes_n_ = []
while True:
    try:
        question_mark_indexes_n_.append(n_.index("?", mark_index + 1))
        mark_index = question_mark_indexes_n_[-1]
    except:
        break
del mark_index

e = 48828210776
c = 424911217826458693271188482852491694940369297457880236440745862098288390787877573188870826662474136117635595469581820897438701808536439253515372270599572410957205732071679473112492384105824407579608609807570901708484387448766679860845675010194569263458004519460566754632064519069931798441594800439391072584357521008322451804184093932574340159874303121148902638623198215122740848972964440643369218995845712850225398026970241764329334880168411101490210967521939326111345328755478871939607713838746130034472222062290683864680767089207394994475704288457419884198094440683719212277209909308624189483383291304152655561598132510592920168139082161599664782768500824666328581248444117598694658693116104713394046556426767195901404124070768998533219449950131992594402053384391402281069051524738448574011706015799612057627873397840332333126918300385816340714330695218474634811049186248916494500036554157466783365347764831559774049643441417703933350259763287625686199516686649877468202362800594613730925454515594296582892327548099806097665527149431039624110210262612840570726083818519704312798346371995109792778138717132161659649324210703155518389649232015389478202295089826746256546164164004711494189887525795950774100651136365164462423824516412

for i in range(10):
    for j in range(10):
        for k in range(10):
            p, q = list(p_), list(q_)
            max_digits = max(len(p), len(q))
            n = int(f"{n_[:question_mark_indexes_n_[0]]}{i}{n_[question_mark_indexes_n_[0]+1:question_mark_indexes_n_[1]]}{j}{n_[question_mark_indexes_n_[1]+1:question_mark_indexes_n_[2]]}{k}{n_[question_mark_indexes_n_[2]+1:]}")
            #
            for l in range(max_digits - 1, -1, -1):
                for m in range(10):
                    partial_p = int(''.join(p[l:])) if not l%2 else int("{0}{1}".format(m, ''.join(p[l+1:])))
                    partial_q = int("{0}{1}".format(m, ''.join(q[l+1:]))) if not l%2 else int(''.join(q[l:]))
                    #
                    if (partial_p*partial_q)%(10**(max_digits-l)) == n%(10**(max_digits-l)):
                        if not l%2:
                            q[l] = str(m)
                        else:
                            p[l] = str(m)
                        break
            #
            p, q = int(''.join(p)), int(''.join(q))
            if (p * q == n) and isPrime(p) and isPrime(q) :
                phi = (p - 1)*(q - 1)
                #
                def roots_of_unity(e, phi, n, rounds=512):
                    phi_coprime = phi
                    while gcd(phi_coprime, e) != 1:
                        phi_coprime //= gcd(phi_coprime, e)
                    roots = set(pow(i, phi_coprime, n) for i in range(1, rounds))
                    assert all(pow(root, e, n) == 1 for root in roots)
                    return roots, phi_coprime
                #
                roots, phi_coprime = roots_of_unity(e, phi, n) 
                d = pow(e, -1, phi_coprime)
                pt = pow(c, d, n)
                assert pow(pt, e, n) == c
                # Use the roots of unity to get all other possible plaintexts
                pts = [(pt * root) % n for root in roots]
                pts = [long_to_bytes(pt) for pt in pts]
                for possibleFlag in pts:
                    if b'CMCTF{' in possibleFlag:
                        print(possibleFlag.decode())
                        exit()
